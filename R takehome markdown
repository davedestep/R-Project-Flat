---
title: 'Tech Test'
author: "David"
date: "February 13, 2019"
output:
  html_document: default
  pdf_document: default
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

##3.	How would you prep the dataset provided for analysis? Please list steps taken and provide code used to prep the tables for analysis. 
-	Convert the data into a usable format. It is currently saved as an excel worksheet with several sheets, so the sheets need to be extracted and read into R. This could be achieved by simply saving each sheet as a separate CSV and reading them into R, but it is also possible to use the âreadxlâ package to import the individual sheets, and then read them in. 
```{r message=FALSE, warning=FALSE}
library(readxl)
library(tidyverse)
```

```{r message=FALSE}
data<-readxl::excel_sheets("flatiron_qs_orders_admins_july_16.xlsx") %>% map(~readxl::read_excel("flatiron_qs_orders_admins_july_16.xlsx", .x)) %>% set_names(excel_sheets("flatiron_qs_orders_admins_july_16.xlsx"))

write.csv(data$Orders, file = "Orders.csv")
write.csv(data$Admins, file = "Admins.csv")
write.csv(data$Demographics, file = "Demographics.csv")
write.csv(data$Patients, file = "Patients.csv")
write.csv(data$Practices, file = "Practices.csv")

Orders<-read.csv("Orders.csv", stringsAsFactors=FALSE)
Admins<-read.csv("Admins.csv", stringsAsFactors=FALSE)
Demographics<-read.csv("Demographics.csv", stringsAsFactors=FALSE)
Patients<-read.csv("Patients.csv", stringsAsFactors=FALSE)
Practices<-read.csv("Practices.csv", stringsAsFactors=FALSE)
```
-	With the data in R, we can see there are two data frames (Demographics and Patients) with 101 observations, and two (Orders, and Admins) with 304 observations. After inspecting the two pairs, it makes sense to join the pairs with equal observations on a few key identifiers (similar to SQL) to simplify the analysis. I will name the new combined Patient and Demographic table as âDFâ, and the combined Orders and Admins table as âDF2â, for simplicity. I will also use a full join so I do not lose any patients that may not have a common identifier between the tables. 
```{r message=FALSE, warning=FALSE}
DF<-full_join(Patients, Demographics, by='patient_id')
DF2<-full_join(Admins, Orders, by=c("patient_id", "external_patient_id", "order_id"))
```
-	Finally, it appears we will need to format the date variables so they can be included in the analysis. Looking ahead, the dates that are necessary in the analysis are âadministered dateâ in âDF2â and âdiagnosis_âdateâ in âDFâ. Strangely, there appear to be several observations that are not formatted the same as the majority of observations (21-Aug-2013, versus 2018-09-19, for example). This will need to be accounted for. The new formatted date variables will be called âmy_administered_dateâ, and âmy_diagnosis_dateâ

```{r message=FALSE, warning=FALSE}
#Administed dates are in two different formats, have to account for both separately and merge the output into a single variable:
DF2$my_administered_date <- as.Date(DF2$administered_date,format="%d-%b-%Y")
DF2$b<-as.Date(DF2$administered_date,format="%Y-%m-%d")
DF2<-DF2 %>% mutate(my_administered_date = coalesce(my_administered_date,b))
DF2$b<-NULL

#Diagnosis dates:
DF$my_diagnosis_date <- as.Date(DF$diagnosis_date,format="%d-%b-%Y")
```

## Using the datasets you have prepped, please answer the following questions and provide all code/output used. Be sure to include and explain any assumptions made when answering each question.
##1.	What is the average time elapsed between a patientâs initial diagnosis date and a patientâs first treatment? Does this time vary by gender?
To determine the elapsed time in question 1, need to find the differences between diagnosis data and (drug) administration date (assuming the earliest date will represent the patientâs first treatment), then compute the average.
```{r}
#Since we have multiple drug administration dates, it is necessary to find the first date for each patient from the admin data (DF2) and join this with the patient data (DF). The variable will be called âfirst_treatmentâ
first_treatment<-DF2 %>% 
  group_by(patient_id) %>% 
  arrange(my_administered_date) %>%
  summarise(first_administered_date = first(my_administered_date),  n = n()) 

#Now join the first treatment dates for patients with our original data that includes diagnosis dates, find the differences, and compute the mean: 
DF<-right_join(DF, first_treatment, by='patient_id')

#Computing the difference in days between the patientsâ first treatment and diagnosis:
DF<-mutate(DF, difference=first_administered_date-my_diagnosis_date) 
DF<-DF%>%mutate(difference=as.numeric(difference))
            

#Finding the overall mean of elapsed time:          

mean(DF$difference, na.rm = TRUE)
```
The mean between the first date a patient was administered medicine (again, assuming this is the first treatment) and the patientsâ initial diagnosis is 14037.99 days. The elapsed time between diagnosis and treatment is unusually large, we should investigate the quality of our data.
```{r}
#Determining if the mean elapsed time varies by gender:
DF %>%
  group_by(gender) %>%
  summarise(Mean = mean(difference, na.rm=TRUE))

```
The mean between the first date a patient was administered medicine and the patient's initial diagnosis is 15385 days for females and 12688 for males.

(We could alternatively have used the order_date to make these calculations, as they appear the same as the administered dates, but have fewer NAs)

Furthermore, there were several differences that were calculated to be negative. This is, of course, impossible, so we should remove these values in a follow up calculation.

## 2.	How many patients are on nivolumab from 2012 to 2016?
```{r}
#I will assume â2012-2016â implies dates prior to the first day of 2016 (so that 2016 and later are excluded). I will subset the data from this range and count the number of unique patients that were administered nivolumab: 
DATE1<-as.Date("2012-01-01")
DATE2<-as.Date("2016-01-01")
DATES <- subset(DF2, my_administered_date>=DATE1 & my_administered_date<DATE2)
newvar<-DATES %>%
  group_by(patient_id) %>%
  filter(drug_name=="nivolumab")%>%
  summarise(count = n_distinct(patient_id))

newvar%>%summarise(count = n_distinct(patient_id))
```
There were 62 patients on nivolumab from 2012 until 2016

## 3.	Using the following risk stratification rules, please summarize the number of high, medium, and low risk patients. 
HighRisk = Female; any age; NON_WHITE OR Male; >= 70; NON_WHITE 
MediumRisk = Female; >=75, WHITE OR Male; <70; NON_WHITE 
LowRisk = Female; < 75, WHITE OR Male; any age; WHITE

I opted to use multiple ifelse clauses to group the criteria for readability purposes. However, there are several alternative approaches like using custom functions (if there was a reason to run the code multiple times), combining similar outputs with an or statement (|), or using which statements. I will provide examples of each at the end of this document (Bonus section!).
```{r}
DF3<-DF%>%
  mutate(risk=ifelse(DF$age>=70  & DF$gender=="male" & DF$race=="NON_WHITE", "HighRisk",
                ifelse(DF$gender=="female" & DF$race=="NON_WHITE", "HighRisk",
                       ifelse(DF$gender=="female" & DF$age>=75 & DF$race=="WHITE", "MediumRisk",
                              ifelse(DF$gender=="male" & DF$age<70 & DF$race=="NON_WHITE", "MediumRisk",
                                     ifelse(DF$gender=="female" & DF$age<75 & DF$race=="WHITE", "LowRisk",
                                            ifelse(DF$gender=="male" & DF$race=="WHITE", "LowRisk", NA)))))))

#Removing rows for patients that appear more than once in the data:
DF4<-DF3%>%select(patient_id, risk, gender, race)
DF4<-distinct(DF4)
#Count
table(DF4$risk)
#Counts by race and sex
table(DF4$risk, DF4$gender, DF4$race)
#Proportion of risk categories among patients
table2<-table(DF4$risk) 
prop.table(table2)

```
